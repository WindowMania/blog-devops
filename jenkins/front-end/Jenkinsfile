pipeline {
    agent any

    environment {
        dockerImage = ''
        APP_NAME = 'kyb.blog'
        IMAGE_NAME = 'kybdev/blog-fe'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        DOCKER_CREDENTIALS_ID = 'docker-hub'
        FRONT_PRIVATE_IP = '10.10.10.3'
        BACK_PRIVATE_IP = '10.10.10.4'
        FRONT_UBUNTU_USER_NAME = 'kyb'

        NEXT_PUBLIC_BACK_URL = "https://blog.kyb.pe.kr/api/v1"
        NEXT_PUBLIC_FRONT_URL = "https://blog.kyb.pe.kr"
        NEXT_PUBLIC_SSR_BACK_URL="http://${BACK_PRIVATE_IP}:8000/api/v1"

        NEXT_ENV = '''
           NEXT_PUBLIC_BACK_URL="${NEXT_PUBLIC_BACK_URL}"
           NEXT_PUBLIC_FRONT_URL="${NEXT_PUBLIC_FRONT_URL}"
           NEXT_PUBLIC_SSR_BACK_URL="${NEXT_PUBLIC_SSR_BACK_URL}"
        '''


        DOCKER_RUN = 'sudo docker run -d --restart always -p 3000:3000 --name ${APP_NAME} ${IMAGE_NAME}'
    }

    stages {
        stage('#Git-Clone') {
            steps {
                sh 'pwd'
                echo 'Cloning Repository'
                git url: 'https://github.com/WindowMania/blog-fe.git', branch: 'master', changelog: false
            }
            post {
                success {
                    echo 'Successfully Cloned Repository'
                }
                failure {
                    error 'This pipeline stops here...'
                }
            }
        }

        stage("#copy-env"){
            steps {
               sh "pwd"
                    sh "ls -all"
                    sh 'echo NEXT_PUBLIC_BACK_URL=${NEXT_PUBLIC_BACK_URL} >> .env.production'
                    sh 'echo NEXT_PUBLIC_FRONT_URL=${NEXT_PUBLIC_FRONT_URL} >> .env.production'
                    sh 'echo NEXT_PUBLIC_SSR_BACK_URL=${NEXT_PUBLIC_SSR_BACK_URL} >> .env.production'
                    sh "cat ./.env.production "
           }
            post {
                success {
                    echo 'Successfully Cloned .env.production'
                }
                failure {
                    error 'This pipeline stops here...'
                }
            }
        }

        stage('#Bulid-Docker') {
            steps {
                echo 'Bulid Docker'
                script {
                    dockerImage = docker.build("${IMAGE_NAME}")
                }
            }
            post {
                failure {
                    error 'This pipeline stops here...'
                }
            }
        }
//
//         stage('#Push-Docker') {
//             steps {
//                 echo 'Push Docker'
//                 script {
//                     docker.withRegistry('', DOCKER_CREDENTIALS_ID) {
//                         dockerImage.push("${IMAGE_TAG}")
//                         dockerImage.push("latest")
//                     }
//                 }
//             }
//             post {
//                 success {
//                     sh 'docker rmi $(docker images -q -f dangling=true) || true'
//                 }
//                 failure {
//                     error 'This pipeline stops here...'
//                 }
//             }
//         }
//
//         stage('Docker Run') {
//             steps {
//                 echo 'Pull Docker Image & Docker Image Run'
//                 sshagent(credentials: ['ssh']) {
//                     sh "ssh -o StrictHostKeyChecking=no ${FRONT_UBUNTU_USER_NAME}@${FRONT_PRIVATE_IP} 'sudo docker pull ${IMAGE_NAME}'"
//                     sh "ssh -o StrictHostKeyChecking=no ${FRONT_UBUNTU_USER_NAME}@${FRONT_PRIVATE_IP} 'sudo docker ps -q -a --filter name=${APP_NAME} | grep -q . && docker rm -f \$(docker ps -aq --filter name=${APP_NAME}) || true'"
//                     sh "ssh -o StrictHostKeyChecking=no ${FRONT_UBUNTU_USER_NAME}@${FRONT_PRIVATE_IP} '${DOCKER_RUN}'"
//                     sh "ssh -o StrictHostKeyChecking=no ${FRONT_UBUNTU_USER_NAME}@${FRONT_PRIVATE_IP} 'sudo docker images -qf dangling=true | xargs -I{} docker rmi {} || true'"
//                     sh "ssh -o StrictHostKeyChecking=no ${FRONT_UBUNTU_USER_NAME}@${FRONT_PRIVATE_IP} 'sudo docker rmi ${IMAGE_NAME}:${IMAGE_TAG} || true'"
//                 }
//             }
//             post {
//                 failure {
//                     error 'This pipeline stops here...'
//                 }
//             }
//         }

    }

}